doctype html
html(lang='en')
	head
		link(rel="icon" type="image/x-icon" href="/images/logo.png")
		meta(charset="UTF-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		title Depth First Search
		meta(name="title" property="og:title" content="Depth First Search")
		meta(name="title" property="twitter:title" content="Depth First Search")
		meta(name="description" property="og:description" content="Blog post about Article on the depth first search definition and its usage for a tree and a graph..")
		meta(name="description" property="twitter:description" content="Blog post about Article on the depth first search definition and its usage for a tree and a graph..")
		meta(name="image" property="og:image" content="https://www.devontaereid.com/images/algorithm.png")
		meta(name="image" property="twitter:image" content="https://www.devontaereid.com/images/algorithm.png")
		meta(property="twitter:card" content="summary_large_image")
		meta(property="twitter:site" content="@_yodev_")
		meta(property="og:url" content="https://www.devontaereid.com")
		meta(property="og:type" content="website")
		link(rel="stylesheet" href="/style.css")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/prism.min.js")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/normalize-whitespace/prism-normalize-whitespace.min.js")
		script(src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/components/prism-python.min.js")
	body
		div#nav-bar.navbar.header-content--mini
			nav
				div.main-menu
					a.menu-branding(href="/")
						img.menu-branding(src="/images/logo.png" alt="branding-logo")
						h3 Devontae Reid
					ul.menu-list
						li
							a(href="/projects") Projects
						li
							a(href="/articles") Articles
						li
							a(href="/gospel") Gospel
						li
							button.display-switch ☀️
		div.post-body
			article.button#post-container
			div.post-header-container
				div.post-header-details
					h1#post-header-title Depth First Search
					div.post-header-meta
						img.post-header-icon(src="https://i.ibb.co/HY4dx9s/headshot.jpg" alt="headshot")
						p.post-header-time Friday, August 11, 2023
						span.post-header-divider |
						p#post-read-time 2 mins
						button.post-header-shareButton#shareButton
							span.post-header-shareButton-icon
								img(src="/images/share_icon.png" alt="share_icon")
								.
									Share
					div.post-header-tags
							span.post-header-tag Data Structures
							span.post-header-tag Algorithms
							span.post-header-tag Tech Interview
				img.post-header-image(src="/images/algorithm.png" alt="algo-img")
			div.post-content
				div.post-section-container#introduction
					h2.section-title Introduction
					p.post-details In this article, I will define the 
						span.bold-text Depth 
						span.bold-text First 
						span.bold-text Search 
						span.bold-text (
						span.bold-text DFS
						span.bold-text ) 
						|  algorithm. I will be explaining the definition and the uses of the search on a tree and a graph.
				div.post-section-container#definition
					h3.section-title Definition
					p.post-details DFS is a tree and graph traversal algorithm used to explore node(s) in a tree or graph data structure. Depending on the data structure a node will have different meaning in regards to the relationship with other nodes. For example, a node in a tree is a single element in a tree that will either be connected to another node via parent-child relationship. While a node in graph will be connected to other nodes via neighbor relationship. 
					p.post-details DFS on a tree has three traversal methods: pre-order, in-order, and post-order. These tree traversals generally go from left to right. In the pre-order traversal, we would start from the current node, then traverse the left subtree, and finally traverse the right subtree. In-order traversal, we would start from the root node and traverse the left subtree, then the current node, and finally traverse the right subtree. The last traversal method post-order traversal, we would start from the root node and traverse the left subtree, then the right subtree, and finally visit the current node. Below is an example of in-order traversal these steps are basis for how each traversal method operates:
					ol
						li.post-list-item Traverse the left subtree
						li.post-list-item Visit the current node
						li.post-list-item Traverse the right subtree
					p.post-details We now get into using these same traversals with a graph data structure. The main difference in using these traversal methods with graphs are that you have to mark each visited node. The reason for the marking of nodes because graph contains cycles and we don’t want to get stuck in an infinite loop.
				div.post-section-container#uses
					h3.section-title Uses
					p.post-details 	When determining when to use the following algorithm we chose by first understanding if the problem is a tree/graph problem or not. This can be difficult at first because all tree/graph problem don’t just same “I’m a tree” or “I’m a graph”. Determining whether a problem is a tree/graph is done by understanding what the problem is asking just like any other algorithm. Generally identifying DFS problem you will notice whether the question is asking for the following:
					ul
						li.post-list-item Max Depth of Tree, *anything* tree
						li.post-list-item Combination Search 
							ul.sublist
								li.post-sublist-item “Generate all possible”
								li.post-sublist-item “Number of ways”
					p.post-details The strategy to determining which traversal methods to use depends on the algorithm that is being design. When thinking about picking pre-order method, you may be thinking of exploring the root prior to the leaves. While using post-order method, you may be thinking of exploring the leaves before the root. In-order is best used, when you know that the tree has a sequence in the nodes.
				div.post-section-container#implementation
					h3.section-title Implementation
					p.post-details 	To implement DFS algorithm is simple for both a tree and a graph. It is implemented just as it is defined. See the example below written in Python:
						div.code-snippet-container
							div.code-snippet-header
								h5.code-snippet-title DFS Implementation for Tree Traversal
								button.copy-bttn
									img.copy-icon(src="/images/copy-icon.png")
							div.code-snippet-body
								pre
									code.code-body.language-python
										| def dfs(root):
										| 	if not root:
										| 		return
										| 	# Traverse the left subtree
										| 	dfs(root.left)
										| 	# Visit current node
										| 	print(root)
										| 	# Traverse the right subtree
										| 	dfs(root.right)
										| 	return
					p.post-details 	The difference in the implementation for a tree and a graph is including a visited set as a state. In the implementation of DFS in a graph you will add a visited set to store all the vertices/nodes that were already visited. Since a graph uses a visited set, you no longer need to used the goal state that a tree would used to find a left node. The python example below shows the basic implementation to start from: 
						div.code-snippet-container
							div.code-snippet-header
								h5.code-snippet-title DFS Implementation for Graph Traversal
								button.copy-bttn
									img.copy-icon(src="/images/copy-icon.png")
							div.code-snippet-body
								pre
									code.code-body.language-python
										| def dfs(root, visited):
										| 	# Visit all neighbors
										| 	for neighbor in get_neighbors(root):
										| 		# Check if neighbor has been visited before
										| 		if neighbor in visited:
										| 			continue
										| 
										| 		# Add neighbor to visited set
										| 		visited.add(neighbor)
										| 
										| 		# Add neighbor to stack
										| 		dfs(neighbor, visited)
		.footer
			.footer-container
				p Sola Scriptura ( Scripture Alone ), Solus Christus ( Christ Alone ), Sola fide ( Faith Alone ), Sola Gratia ( Grace Alone ), and Soli Deo Gloria ( Glory to God Alone )
				.socials
					ul
						li.social-links
							a(href="https://www.linkedin.com/in/devontaereid/")
								img(src="/images/websites/linkedin.png")
						li.social-links
							a(href="https://twitter.com/_yodev_")
								img(src="/images/websites/twitter.png")
						li.social-links
							a(href="https://github.com/y0dev")
								img(src="/images/websites/github.png")
				p.footer-small Icons provided by 
					a(href="https://www.flaticon.com/authors/freepik" title="Freepik") Freepik
		script(type="text/javascript" src="/scripts/main.js")
		script(type="text/javascript" src="/scripts/code_script.js")
		script(type="text/javascript" src="https://static.esvmedia.org/crossref/crossref.min.js")
