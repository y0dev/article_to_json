doctype html
html(lang='en')
	head
		link(rel="icon" type="image/x-icon" href="/images/logo.png")
		meta(charset="UTF-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		title Help with System Design Interviews
		meta(name="title" property="og:title" content="Help with System Design Interviews")
		meta(name="title" property="twitter:title" content="Help with System Design Interviews")
		meta(name="description" property="og:description" content="Blog post about System design study focuses on understanding user requirements, creating system architecture and developing a plan for implementation..")
		meta(name="description" property="twitter:description" content="Blog post about System design study focuses on understanding user requirements, creating system architecture and developing a plan for implementation..")
		meta(name="image" property="og:image" content="https://www.devontaereid.com/images/web-dev.png")
		meta(name="image" property="twitter:image" content="https://www.devontaereid.com/images/web-dev.png")
		meta(property="twitter:card" content="summary_large_image")
		meta(property="twitter:site" content="@_yodev_")
		meta(property="og:url" content="https://www.devontaereid.com")
		meta(property="og:type" content="website")
		link(rel="stylesheet" href="/style.css")
	body
		div#nav-bar.navbar.header-content--mini
			nav
				div.main-menu
					a.menu-branding(href="/")
						img.menu-branding(src="/images/logo.png" alt="branding-logo")
						h3 Devontae Reid
					ul.menu-list
						li
							a(href="/projects") Projects
						li
							a(href="/articles") Articles
						li
							a(href="/gospel") Gospel
						li
							button.display-switch ☀️
		div.post-body
			article.button#post-container
			div.post-header-container
				div.post-header-details
					h1#post-header-title Help with System Design Interviews
					div.post-header-meta
						img.post-header-icon(src="https://i.ibb.co/HY4dx9s/headshot.jpg" alt="headshot")
						p.post-header-time Wednesday, February 08, 2023
						span.post-header-divider |
						p#post-read-time 7 mins
						button.post-header-shareButton#shareButton
							span.post-header-shareButton-icon
								img(src="/images/share_icon.png" alt="share_icon")
								.
									Share
					div.post-header-tags
							span.post-header-tag System Design
							span.post-header-tag Technology
							span.post-header-tag MAANG
				img.post-header-image(src="/images/web-dev.png" alt="web-dev-img")
			div.post-content
				div.post-section-container#preparation-for-the-interview
					h2.section-title Preparation for the Interview
					div.post-image-container
						a.post-image-container(href="https://media.geeksforgeeks.org/wp-content/uploads/20200824215825/LoadBalancingSystemDesign.png")
							img.post-image(src="https://media.geeksforgeeks.org/wp-content/uploads/20200824215825/LoadBalancingSystemDesign.png" alt="system-design")
						figcaption.post-image-caption Load Balancing from G4G
					p.post-details Why system design? System design aims to build systems that are reliable, effective, and maintainable. Reliable systems handle faults, failures, and errors.  Effective systems meet all user needs and business requirements. Maintainable systems are flexible and easy to scale up or down. The ability to add new features also comes under the umbrella of maintainability.
					p.post-details Preparing for system design interviews can be helpful when you have help from some of the big tech companies. Some companies share some of their technical details on tech blogs that are given to the public. Their reason for sharing this information is to encourage and challenge any future employees to problem solve and to gain an understanding of what it's like working at their company. The tech blogs are 
						a.post-link(href="https://engineering.fb.com/") Engineering at Meta
						.
							,
						a.post-link(href="https://research.fb.com/") Meta Research
						.
							,
						a.post-link(href="https://aws.amazon.com/blogs/architecture/") AWS Architecture Blog
						.
							,
						a.post-link(href="https://www.amazon.science/blog") Amazon Science Blog
						.
							,
						a.post-link(href="https://netflixtechblog.com/") Netflix TechBlog
						.
							,
						a.post-link(href="https://research.google/") Google Research
						.
							,
						a.post-link(href="https://quoraengineering.quora.com/") Engineering at Quora
						.
							,
						a.post-link(href="https://eng.uber.com/") Uber Engineering Blog
						.
							,
						a.post-link(href="https://databricks.com/blog/category/engineering") Databricks Blog
						.
							,
						a.post-link(href="https://medium.com/@Pinterest_Engineering") Pinterest Engineering
						.
							,
						a.post-link(href="https://medium.com/blackrock-engineering") BlackRock Engineering
						.
							,
						a.post-link(href="https://eng.lyft.com/") Lyft Engineering
						.
							, and
						a.post-link(href="https://engineering.salesforce.com/") Salesforce Engineering
						.
							.
					p.post-details Some thoughts that should happen when designing a system should be “Why does this system works?”. Look into why some of the popular applications works at a high level. Understand why some component was used instead of another. Build serious side projects and improve on them and refine them. Build a system from scratch and get familiar with all the processes and details of its construction.
				div.post-section-container#stay-on-track
					h2.section-title Stay on track
					p.post-details At all costs, avoid going to the lower level! What this mean for example is to make sure you are having discussions about traditional databases like MySQL or NoSQL. This helps with creating conversations about the trade-offs of the two databases.
					p.post-details Key things to remember when thinking of deliverables expected from the developed design 
					ol
						li.post-list-item Functional requirements: These represent the features a user of the designed system will be able to use. For example, the system will allow a user to search for content using the search bar.
						li.post-list-item Non-functional requirements (NFRs): The non-functional requirements are criteria based on which the user of a system will consider the system usable. NFR may include requirements like high availability, low latency, scalability, and so on.
				div.post-section-container#the-interview
					h2.section-title The Interview
					p.post-details When going into an interview remember that the interview has ask these questions to other candidates. So, don't produce a design that sounds the same as other candidates.
					p.post-details The most recommended strategy to use in a design interview is to ask refining questions, handle the given data, discussing the components, and finally discussing trade-offs. First thing you want to do is better understand the system planning to design is by asking refining questions. We need to find the functional and nonfunctional requirements. For example, the ability to send messages in near real-time to friend's vs messaging service performance shouldn't degrade with increasing user load. To better understand the data, we should ask the following questions: 
					ul
						li.post-list-item What is the size of the data right now? (Guessing this is the size of data type)
						li.post-list-item At what rate is the data expected to grow over time?
						li.post-list-item How will the data be consumed by other subsystems or end users?
						li.post-list-item Is the data read-heavy or write-heavy?
						li.post-list-item Do we need strict consistency of data, or will eventual consistency work?
						li.post-list-item What is the durability target of the data?
						li.post-list-item What privacy and regulatory requirements do we require for storing or transmitting user data?
				div.post-section-container#abstraction
					h2.section-title Abstraction
					p.post-details Abstraction is the process of hiding details that we don't need. Abstractions in distributed systems helps with simplifying their work and relieve them od the burden of dealing with the underlying complexity of the system.
				div.post-section-container#remote-procedure-calls
					h2.section-title Remote Procedure Calls
					p.post-details Remote Procedure Calls (RPC) is an inter-process communication protocol that's widely used in distributed systems. Developers can use the RPC method without knowing the network communication details. As a result, they can concentrate on the design aspects, rather than the machine and communication-level specifics.
				div.post-section-container#consistency
					h2.section-title Consistency
					p.post-details Consistency is having the same state across all different systems in the distributed system. A strong consistency means that our system is never in an inconsistent state, but at a cost of lower performance and availability because the systems must stay consistent with each other. Eventual consistency is having the system in an inconsistent state for some time but will eventually be in a consistent state. This is also the weakest of the consistencies. There are drawbacks from both. Let's use a YouTube example. Say if you have (n) number of users and one or more users watch a video. We must update the view counter every time a user watches a video, but we have other users that want to read the view count. If we use the strong consistency, we will have to be happy with a long wait time for the other users to read the view value of the video. This is mainly because you must replicate the data across multiple database servers which can be over many miles away from each other and possibility in many different geographic locations. Rather if we use the eventual consistency, we will have to be happy with stale servers (servers that haven't been updated with the current value). This will help with keeping the service up in running without users losing any time. In an interview describe both cases pros and cons. Stock market or updating are a good use for a strong consistency and YouTube is a good use of eventual consistency.
					p.post-details There is another consistency in between these two consistencies. One being casual consistency and the other being sequential consistency with casual being the weaker of the two. Casual works by categorizing operations into dependent and independent operations. A dependent operation is used to preserve the order of the operations. If one operation is dependent on another the independent operation must run first before the dependent. For example, in order to reply to a comment a comment must be created first before the reply. This is used to prevent non-intuitive behavior such as replying to a comment that doesn't exist which will cause a long weight. Sequential consistency ensures that the ordered specified by the client program has been preserved. The downfall is that the user may not be able to read instantaneously or in the order that the write occurred. Example of this is a social network application, we usually don't care about the order in which some of our friends' posts appear. However, we still anticipate a single friend's posts to appear in the correct order in which they were created). Similarly, we expect our friends' comments in a post to display in the order that they were submitted. The sequential consistency model captures all of these qualities.
				div.post-section-container#availability
					h2.section-title Availability
					p.post-details Availability is the percentage of time that some service or infrastructure is accessible to clients and is operated upon under normal conditions. Each service provider may start measuring availability at different points in time. Some cloud providers start measuring it when they first offer the service, while some measure it for specific clients when they start using the service. Some providers might not reduce their reported availability numbers if their service was not down for all the clients. The planned downtimes are excluded. Downtime due to cyberattacks might not be incorporated into the calculation of availability. Therefore, we should carefully understand how a specific provider calculates their availability numbers.
				div.post-section-container#reliability
					h2.section-title Reliability
					p.post-details Reliability is the probability that the service will perform its functions for a specified time. Reliability measures how the service performs under varying operating conditions.
				div.post-section-container#scalability
					h2.section-title Scalability
					p.post-details Scalability is the ability of a system to handle an increasing amount of workload without compromising performance. A search engine, for example, must accommodate increasing numbers of users, as well as the amount of data it indexes. The workload can be of different types, including the following: 
					ul
						li.post-list-item Request workload: This is the number of requests served by the system.
						li.post-list-item Data/storage workload: This is the amount of data stored by the system.
					p.post-details There are two approaches to scalability. One being vertical scalability (scaling up) and the other being horizontal scalability (scaling out). Vertical scaling, refers to scaling by providing additional capabilities (for example, additional CPUs or RAM) to an existing device. Vertical scaling allows us to expand our present hardware or software capacity, but we can only grow it to the limitations of our server. This is pricier because of the need for expensive components. Horizontal scaling, refers to increasing the number of machines in the network. We use commodity nodes for this purpose because of their attractive dollar-cost benefits. The catch here is that we need to build a system such that many nodes could collectively work as if we had a single, huge server. 
					ul
						li.post-list-item Vertical Scaling = more space in a single system
						li.post-list-item Horizontal Scaling = more nodes that need to be in sync with one another
				div.post-section-container#maintainability
					h2.section-title Maintainability
					p.post-details Is the ability to keep the system up and running by finding and fixing bugs, adding new functionalities, keeping the system's platform updated, and ensuring smooth system operations. Maintainability can be defined more clearly in close relation to reliability. The only difference between them is the variable of interest. Maintainability refers to time-to-repair, whereas reliability refers to both time-to-repair and the time-to-failure. Combining maintainability and reliability analysis can help us achieve availability, downtime, and uptime insights.
				div.post-section-container#fault-tolerance
					h2.section-title Fault Tolerance
					p.post-details Fault tolerance refers to a system's ability to execute persistently even if one or more of its components fail. Here, components can be software or hardware. Conceiving a system that is hundred percent fault-tolerant is practically very difficult. Fault tolerance can be achieved by many approaches, considering the system structure. We compromise either on availability or on consistency under failures—a reality that is outlined in the CAP theorem.
					p.post-details Checkpointing is a technique that saves the system's state in stable storage when the system state is consistent. Checkpointing is performed in many stages at different time intervals. The primary purpose is to save the computational state at a given point. When a failure occurs in the system, we can get the last computed data from the previous checkpoint and start working from there. When the system has to perform checkpointing, it makes sure that the system is in a consistent state, meaning that all processes are stopped except read processes that do not change the state of the system. This type of checkpointing is known as synchronous checkpointing. On the other hand, checkpointing in an inconsistent state lead to data inconsistency problems.
				div.post-section-container#backoftheenvelope
					h2.section-title Back-Of-The-Envelope
					p.post-details This is a very usual tool in your system design toolbox. The purpose of the back-of-the-envelope calculation for quick sanity check of the design. Absolute accuracy is not important rather than good enough. Remember that we have a variety of servers for providing various services within a data center.
					p.post-details For example, if the math says that our service will need to handle about 1,000,000 requests per second. We find out our web server can only handle 10,000 request per second. What did we learn from this? We learn that we will need a cluster of web servers and we would need a load balancer. 1,000,000 / 10,000 = 100 servers.
					div.post-image-container
						a.post-image-container(href="/images/system-design/database_rates.png")
							img.post-image(src="/images/system-design/database_rates.png" alt="system-design-db-rates")
						figcaption.post-image-caption Database Rates
					div.post-image-container
						a.post-image-container(href="/images/system-design/latency_values.png")
							img.post-image(src="/images/system-design/latency_values.png" alt="system-design-latency-rates")
						figcaption.post-image-caption Latency Rates
					div.post-image-container
						a.post-image-container(href="/images/system-design/server_specs.png")
							img.post-image(src="/images/system-design/server_specs.png" alt="system-design-server-specs")
						figcaption.post-image-caption Server Specs
		.footer
			.footer-container
				p Sola Scriptura ( Scripture Alone ), Solus Christus ( Christ Alone ), Sola fide ( Faith Alone ), Sola Gratia ( Grace Alone ), and Soli Deo Gloria ( Glory to God Alone )
				.socials
					ul
						li.social-links
							a(href="https://www.linkedin.com/in/devontaereid/")
								img(src="/images/websites/linkedin.png")
						li.social-links
							a(href="https://twitter.com/_yodev_")
								img(src="/images/websites/twitter.png")
						li.social-links
							a(href="https://github.com/y0dev")
								img(src="/images/websites/github.png")
				p.footer-small Icons provided by 
					a(href="https://www.flaticon.com/authors/freepik" title="Freepik") Freepik
		script(type="text/javascript" src="/scripts/main.js")
		script(type="text/javascript" src="https://static.esvmedia.org/crossref/crossref.min.js")
